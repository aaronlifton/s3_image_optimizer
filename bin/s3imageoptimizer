#!/usr/bin/env ruby
# encoding: utf-8

require 's3_image_optimizer'

mode = ARGV.first

options = {
  bucket: ENV['AWS_BUCKET'], dir: ENV['AWS_BUCKET_DIR'],
  upload_bucket: ENV['AWS_UPLOAD_BUCKET'],
  tmp: "/tmp"
}
if ARGV[1..-1]
  ARGV[1..-1].each do |a|
    opt = a.split("=")
    if opt.length == 2
      k = opt[0].to_sym
      v = opt[1]
      if [:key_contains, :only_filenames, :skip_filenames].include?(k)
        v = v.split(',')
      end
      options[k] = v
    end
  end
end


case mode
when "optimize_daemon"
  system "nohup s3imageoptimizer optimize &"
when "optimize"
  S3ImageOptimizer.optimize_bucket!(options)
when "upload"
  S3ImageOptimizer.upload_all!(options)
when "upload_daemon"
  system "nohup s3imageoptimizer upload #{bucket} #{path} &"
when "optimize_dir"
  S3ImageOptimizer.optimize_dir!((bucket || Dir.pwd))
else
  puts %{Command required!
    s3imageoptimizer [command] bucket=my_bucket tmp=/tmp ...\n
    Commands
    [optimize_daemon]   - run in background
    [optimize]          - run in foreground
    [upload]            - upload downloaded/optimized images
    [upload_daemon]     - upload in background
    [optimize_dir]      - optimize images in current or specified directory
    [help]              - show this message\n
    Arguments
    [bucket]            - bucket name
    [tmp]               - tmp path
    [key_contains]      - only download keys that include
    [only_filenames]    - x.jpg
    [upload_bucket]     - upload bucket name
    [tmp_download_path] - download path for upload mode
    [skip_filenames]    - x.jpg, y.jpg\n
    Happy optimizing! ¯\\_(ツ)_/¯
  }
end